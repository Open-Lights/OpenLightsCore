on: [push, pull_request, workflow_dispatch]

name: CI

env:
  # --cfg=web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: -D warnings --cfg=web_sys_unstable_apis
  RUSTDOCFLAGS: -D warnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        
        - os: ubuntu-latest
          TARGET: arm-unknown-linux-musleabihf

        - os: ubuntu-latest
          TARGET: armv7-unknown-linux-musleabihf

        - os: ubuntu-latest
          TARGET: aarch64-unknown-linux-gnu

        - os: ubuntu-latest
          TARGET: armv7-unknown-linux-musleabihf

    steps:
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"

    - uses: actions/checkout@master
    - uses: actions-rs/toolchain@v1.0.1
      with:
        toolchain: stable
        target: ${{ matrix.TARGET }}
        override: true

    - name: Cache
    - uses: Swatinem/rust-cache@v2
      with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        prefix-key: "v0-rust"

        # A cache key that is used instead of the automatic `job`-based key,
        # and is stable over multiple jobs.
        # default: empty
        shared-key: ""

        # An additional cache key that is added alongside the automatic `job`-based
        # cache key and can be used to further differentiate jobs.
        # default: empty
        key: ""

        # A whitespace separated list of env-var *prefixes* who's value contributes
        # to the environment cache key.
        # The env-vars are matched by *prefix*, so the default `RUST` var will
        # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
        # default: "CARGO CC CFLAGS CXX CMAKE RUST"
        env-vars: "CARGO CC CFLAGS CXX CMAKE RUST"

        # The cargo workspaces and target directory configuration.
        # These entries are separated by newlines and have the form
        # `$workspace -> $target`. The `$target` part is treated as a directory
        # relative to the `$workspace` and defaults to "target" if not explicitly given.
        # default: ". -> target"
        workspaces: ". -> target"

        # Additional non workspace directories to be cached, separated by newlines.
        cache-directories: ""

        # Determines whether workspace `target` directories are cached.
        # If `false`, only the cargo registry will be cached.
        # default: "true"
        cache-targets: "true"

        # Determines if the cache should be saved even when the workflow has failed.
        # default: "false"
        cache-on-failure: "false"

        # Determines which crates are cached.
        # If `true` all crates will be cached, otherwise only dependent crates will be cached.
        # Useful if additional crates are used for CI tooling.
        # default: "false"
        cache-all-crates: "false"

        # Determiners whether the cache should be saved.
        # If `false`, the cache is only restored.
        # Useful for jobs where the matrix is additive e.g. additional Cargo features,
        # or when only runs from `master` should be saved to the cache.
        # default: "true"
        save-if: "true"

        # Specifies what to use as the backend providing cache
        # Can be set to either "github" or "buildjet"
        # default: "github"
        cache-provider: "github"

    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }}

    - name: Rename
      run: cp target/${{ matrix.TARGET }}/release/eframe_template${{ matrix.EXTENSION }} eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: actions/upload-artifact@master
      with:
        name: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        path: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: svenstaro/upload-release-action@v2
      name: Upload binaries to release
      if: ${{ github.event_name == 'push' }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        asset_name: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        tag: ${{ github.ref }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        overwrite: true
